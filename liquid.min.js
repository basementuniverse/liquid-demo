"use strict";function _instanceof(left,right){if(right!=null&&typeof Symbol!=="undefined"&&right[Symbol.hasInstance]){return right[Symbol.hasInstance](left);}else{return left instanceof right;}}
function _classCallCheck(instance,Constructor){if(!_instanceof(instance,Constructor)){throw new TypeError("Cannot call a class as a function");}}
function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}
function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}
var liquid=function liquid(canvas){var X=0,Y=1,Z=2;var VX=3,VY=4,VZ=5;var R=0,G=1,B=2;var GRID_SIZE=10;var GRID_BUFFER=2;var MIN_CELL_SIZE=50;var RANDOMIZATION=0.8;var Z_OFFSET=10;var LIGHT_DIRECTION=[1,1,0];var BASE_COLOUR=[47,64,80];var SHADOW_COLOUR=[31,37,43];var LIGHT_COLOUR=[36,185,159];var SPREAD=0.6;var DAMPING=0.1;var FRICTION=0.999;var WAVE_COUNT=20;var WAVE_AMOUNT=0.5;var MOUSE_AMOUNT=1.1;var FREQUENCY=2;var PHASE=5;var context=canvas.getContext('2d');var width=0;var height=0;var cellSize=0;var points=[];var triangles=[];var elapsedTime=0;var hammer=new Hammer.Manager(canvas,{recognizers:[[Hammer.Pan]]});var mouse={position:[0,0],down:false};hammer.on('panstart',function(){mouse.down=true;});hammer.on('panend',function(){mouse.down=false;});hammer.on('pan',function(e){mouse.position[X]=e.center.x;mouse.position[Y]=e.center.y;});function resize(){canvas.width=width=canvas.clientWidth;canvas.height=height=canvas.clientHeight;draw(context);}
window.onresize=resize;resize();var WaveGenerator=function(){function WaveGenerator(n){_classCallCheck(this,WaveGenerator);this.n=n;this.wavesX=[];this.wavesY=[];for(var i=0;i<n;i++){this.wavesX.push({frequency:(Math.random()*2-1)*FREQUENCY,phase:(Math.random()*2-1)*PHASE});this.wavesY.push({frequency:(Math.random()*2-1)*FREQUENCY,phase:(Math.random()*2-1)*PHASE});}}
_createClass(WaveGenerator,[{key:"sample",value:function sample(t,x,y){var result=0,a=1/this.n;for(var i=0;i<this.n;i++){result+=(Math.sin(t*this.wavesX[i].frequency+x+this.wavesX[i].phase)+Math.cos(t*this.wavesY[i].frequency+y+this.wavesY[i].phase))*a;}
return result*WAVE_AMOUNT;}}]);return WaveGenerator;}();var waveGenerator=new WaveGenerator(WAVE_COUNT);function initialise(){var size=GRID_SIZE+GRID_BUFFER*2;var offsetX,offsetY;for(var y=0;y<size;y++){for(var x=0;x<size;x++){offsetX=(Math.random()-0.5)*RANDOMIZATION;offsetY=(Math.random()-0.5)*RANDOMIZATION;points.push([x+0.5+offsetX,y+0.5+offsetY]);}}
var d=new Delaunator(points.flat());triangles=d.triangles;for(var _i=0,_points=points;_i<_points.length;_i++){var point=_points[_i];point.push(Z_OFFSET,0,0,0);}}
function handleInput(){if(mouse.down){var gx=Math.floor(mouse.position[X]/cellSize)+GRID_BUFFER;var gy=Math.floor(mouse.position[Y]/cellSize)+GRID_BUFFER;var p=points[index(gx,gy)];var m=[mouse.position[X]/cellSize+GRID_BUFFER,mouse.position[Y]/cellSize+GRID_BUFFER];var d=clamp(1-len(sub([m[X],m[Y],0],[p[X],p[Y],0])),0,1);p[Z]+=MOUSE_AMOUNT*d;}}
function update(dt){elapsedTime+=dt;var size=GRID_SIZE+GRID_BUFFER*2;var point,d,a;for(var y=0;y<size;y++){for(var x=0;x<size;x++){point=points[index(x,y)];point[Z]+=waveGenerator.sample(elapsedTime,x,y);a=(averageAdjacent(x,y)-point[Z])*SPREAD;point[Z]+=a;d=mul(sub([point[X],point[Y],Z_OFFSET],point),DAMPING);point[VX]+=d[X];point[VY]+=d[Y];point[VZ]+=d[Z];point[VX]*=FRICTION;point[VY]*=FRICTION;point[VZ]*=FRICTION;point[X]+=point[VX];point[Y]+=point[VY];point[Z]+=point[VZ];}}}
function draw(context){context.save();context.fillStyle=rgb(BASE_COLOUR[R],BASE_COLOUR[G],BASE_COLOUR[B]);context.fillRect(0,0,width,height);cellSize=Math.max(Math.max(width,height)/GRID_SIZE,MIN_CELL_SIZE);context.scale(cellSize,cellSize);context.translate(-GRID_BUFFER,-GRID_BUFFER);var p1,p2,p3,d,colour;for(var i=0;i<triangles.length;i+=3){p1=project(points[triangles[i]]);p2=project(points[triangles[i+1]]);p3=project(points[triangles[i+2]]);d=dot(norm(LIGHT_DIRECTION),norm(cross(sub(points[triangles[i+1]],points[triangles[i]]),sub(points[triangles[i+2]],points[triangles[i]]))));if(d<0){colour=rgb(lerp(BASE_COLOUR[R],SHADOW_COLOUR[R],Math.abs(d)),lerp(BASE_COLOUR[G],SHADOW_COLOUR[G],Math.abs(d)),lerp(BASE_COLOUR[B],SHADOW_COLOUR[B],Math.abs(d)));}else{colour=rgb(lerp(BASE_COLOUR[R],LIGHT_COLOUR[R],d),lerp(BASE_COLOUR[G],LIGHT_COLOUR[G],d),lerp(BASE_COLOUR[B],LIGHT_COLOUR[B],d));}
drawTriangle(context,p1,p2,p3,colour);}
context.restore();}
function drawTriangle(context,p1,p2,p3,colour){context.fillStyle=colour;context.beginPath();context.moveTo(p1[X],p1[Y]);context.lineTo(p2[X],p2[Y]);context.lineTo(p3[X],p3[Y]);context.closePath();context.fill();}
function project(v){var size=Math.floor(GRID_SIZE/2+GRID_BUFFER);var x=v[X]-size;var y=v[Y]-size;var r=Z_OFFSET/v[Z];return[r*x+size,r*y+size];}
function averageAdjacent(x,y){var tl=(points[index(x-1,y-1)]||[0,0,Z_OFFSET])[Z];var t=(points[index(x,y-1)]||[0,0,Z_OFFSET])[Z];var tr=(points[index(x+1,y-1)]||[0,0,Z_OFFSET])[Z];var l=(points[index(x-1,y)]||[0,0,Z_OFFSET])[Z];var r=(points[index(x+1,y)]||[0,0,Z_OFFSET])[Z];var bl=(points[index(x-1,y+1)]||[0,0,Z_OFFSET])[Z];var b=(points[index(x,y+1)]||[0,0,Z_OFFSET])[Z];var br=(points[index(x+1,y+1)]||[0,0,Z_OFFSET])[Z];return(tl+t+tr+l+r+bl+b+br)/8;}
function index(x,y){return y*(GRID_SIZE+GRID_BUFFER*2)+x;}
function cross(v1,v2){return[v1[Y]*v2[Z]-v1[Z]*v2[Y],v1[Z]*v2[X]-v1[X]*v2[Z],v1[X]*v2[Y]-v1[Y]*v2[X]];}
function dot(v1,v2){return v1[X]*v2[X]+v1[Y]*v2[Y]+v1[Z]*v2[Z];}
function len(v){return Math.sqrt(v[X]*v[X]+v[Y]*v[Y]+v[Z]*v[Z]);}
function sub(v1,v2){return[v1[X]-v2[X],v1[Y]-v2[Y],v1[Z]-v2[Z]];}
function mul(v,s){return[v[X]*s,v[Y]*s,v[Z]*s];}
function norm(v){var l=len(v);if(l!=0){return[v[X]/l,v[Y]/l,v[Z]/l];}
return v;}
function lerp(a,b,i){return(1-i)*a+i*b;}
function clamp(a,min,max){return Math.min(Math.max(a,min),max);}
function rgb(r,g,b){return 'rgb('+Math.floor(r)+','+Math.floor(g)+','+Math.floor(b)+')';}
function loop(){handleInput();update(1/60);draw(context);window.requestAnimationFrame(loop);}
initialise();loop();};